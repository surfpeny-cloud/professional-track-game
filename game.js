// ===== –ü–†–û–°–¢–ê–Ø –†–ê–ë–û–ß–ê–Ø –í–ï–†–°–ò–Ø GAME.JS =====
console.log('üéÆ game.js –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...');

class ProfessionalTrackGame {
    constructor() {
        console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∏–≥—Ä—ã...');
        this.players = [];
        this.currentPlayerIndex = 0;
        this.currentTurn = 1;
        this.gameState = 'setup';
        
        this.init();
    }

    init() {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã...');
        this.bindEvents();
        this.loadFromStorage();
        this.updateUI();
        console.log('‚úÖ –ò–≥—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    }

    bindEvents() {
        console.log('üîó –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π...');
        
        // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞ - –°–ê–ú–ê–Ø –ü–†–û–°–¢–ê–Ø –í–ï–†–°–ò–Ø
        const addBtn = document.getElementById('addPlayerBtn');
        if (addBtn) {
            console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω–∞');
            addBtn.addEventListener('click', () => {
                console.log('üéØ –ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞!');
                this.addPlayer();
            });
        } else {
            console.error('‚ùå –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
        }

        // Enter –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        const nameInput = document.getElementById('playerNameInput');
        if (nameInput) {
            nameInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    this.addPlayer();
                }
            });
        }

        // –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        this.safeBind('startGameBtn', () => this.startGame());
        this.safeBind('rollBtn', () => this.rollDice());
        this.safeBind('nextPlayerBtn', () => this.nextPlayer());
        this.safeBind('successBtn', () => this.completeQuest(true));
        this.safeBind('failBtn', () => this.completeQuest(false));
    }

    safeBind(elementId, handler) {
        const element = document.getElementById(elementId);
        if (element) {
            element.addEventListener('click', handler);
        }
    }

    // ===== –û–°–ù–û–í–ù–û–ô –ú–ï–¢–û–î –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ò–ì–†–û–ö–ê =====
    addPlayer() {
        console.log('üë§ addPlayer() –≤—ã–∑–≤–∞–Ω');
        
        // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
        const nameInput = document.getElementById('playerNameInput');
        const colorSelect = document.getElementById('playerColorSelect');
        
        if (!nameInput || !colorSelect) {
            console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º—ã');
            alert('–û—à–∏–±–∫–∞: —Ñ–æ—Ä–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            return;
        }

        const name = nameInput.value.trim();
        const color = colorSelect.value;

        console.log(`üìù –í–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: "${name}", —Ü–≤–µ—Ç: ${color}`);

        // –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
        if (!name) {
            alert('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–≥—Ä–æ–∫–∞');
            nameInput.focus();
            return;
        }

        if (this.players.length >= 6) {
            alert('–ú–∞–∫—Å–∏–º—É–º 6 –∏–≥—Ä–æ–∫–æ–≤');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        if (this.players.some(player => player.name.toLowerCase() === name.toLowerCase())) {
            alert('–ò–≥—Ä–æ–∫ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
            nameInput.focus();
            return;
        }

        // –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–∫–∞
        const player = {
            id: Date.now().toString(),
            name: name,
            color: color,
            reputation: 3,
            level: 'intern',
            position: 0
        };

        console.log('üéÆ –°–æ–∑–¥–∞–Ω –∏–≥—Ä–æ–∫:', player);

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–∞—Å—Å–∏–≤
        this.players.push(player);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        this.updatePlayersList();
        this.updateStartButton();
        
        // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
        nameInput.value = '';
        nameInput.focus();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        this.showMessage(`–ò–≥—Ä–æ–∫ "${name}" –¥–æ–±–∞–≤–ª–µ–Ω!`, 'success');
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º
        this.saveToStorage();

        console.log('‚úÖ –ò–≥—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω. –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤:', this.players.length);
    }

    updatePlayersList() {
        const playersList = document.getElementById('playersList');
        const playerCount = document.getElementById('playerCount');
        
        if (!playersList || !playerCount) {
            console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            return;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
        playerCount.textContent = `${this.players.length} –∏–≥—Ä–æ–∫–æ–≤`;

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
        if (this.players.length === 0) {
            playersList.innerHTML = `
                <div class="empty-state">
                    <div class="empty-icon">üë•</div>
                    <div class="empty-text">–ü–æ–∫–∞ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤</div>
                    <div class="empty-subtext">–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å</div>
                </div>
            `;
        } else {
            playersList.innerHTML = this.players.map(player => `
                <div class="player-item ${player.color}">
                    <div class="player-info">
                        <div class="player-color ${player.color}"></div>
                        <span class="player-name">${player.name}</span>
                    </div>
                    <button class="remove-player" onclick="game.removePlayer('${player.id}')">√ó</button>
                </div>
            `).join('');
        }
    }

    removePlayer(playerId) {
        console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞:', playerId);
        
        this.players = this.players.filter(player => player.id !== playerId);
        this.updatePlayersList();
        this.updateStartButton();
        this.saveToStorage();
        
        this.showMessage('–ò–≥—Ä–æ–∫ —É–¥–∞–ª–µ–Ω', 'info');
    }

    updateStartButton() {
        const startBtn = document.getElementById('startGameBtn');
        if (startBtn) {
            startBtn.disabled = this.players.length < 2;
        }
    }

    updateUI() {
        this.updatePlayersList();
        this.updateStartButton();
    }

    showMessage(message, type = 'info') {
        // –ü—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        console.log(`üí¨ ${type}: ${message}`);
        
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫—Ä–∞—Å–∏–≤—ã–π toast –ø–æ–∑–∂–µ
        const notification = document.createElement('div');
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: ${type === 'success' ? '#00b894' : type === 'error' ? '#ff7675' : '#74b9ff'};
            color: white;
            padding: 15px 20px;
            border-radius: 10px;
            z-index: 10000;
            box-shadow: 0 5px 15px rgba(0,0,0,0.3);
        `;
        notification.textContent = message;
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.remove();
        }, 3000);
    }

    startGame() {
        if (this.players.length < 2) {
            this.showMessage('–ù—É–∂–Ω–æ –∫–∞–∫ –º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞', 'error');
            return;
        }
        
        this.gameState = 'playing';
        document.getElementById('setupSection').style.display = 'none';
        document.getElementById('gameInterface').style.display = 'block';
        
        this.showMessage('–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! üéÆ', 'success');
    }

    rollDice() {
        this.showMessage('–ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞! üé≤', 'info');
        // –†–µ–∞–ª–∏–∑—É–µ–º –ø–æ–∑–∂–µ
    }

    nextPlayer() {
        this.showMessage('–°–ª–µ–¥—É—é—â–∏–π –∏–≥—Ä–æ–∫', 'info');
        // –†–µ–∞–ª–∏–∑—É–µ–º –ø–æ–∑–∂–µ
    }

    completeQuest(success) {
        this.showMessage(success ? '–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! ‚úÖ' : '–ó–∞–¥–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ ‚ùå', success ? 'success' : 'error');
        // –†–µ–∞–ª–∏–∑—É–µ–º –ø–æ–∑–∂–µ
    }

    saveToStorage() {
        try {
            const data = {
                players: this.players,
                gameState: this.gameState
            };
            localStorage.setItem('professionalTrackGame', JSON.stringify(data));
        } catch (e) {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–≥—Ä—É');
        }
    }

    loadFromStorage() {
        try {
            const saved = localStorage.getItem('professionalTrackGame');
            if (saved) {
                const data = JSON.parse(saved);
                this.players = data.players || [];
                this.gameState = data.gameState || 'setup';
                console.log('üíæ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ:', this.players.length, '–∏–≥—Ä–æ–∫–æ–≤');
            }
        } catch (e) {
            console.warn('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
        }
    }
}

// ===== –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø =====
let game;

// –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ DOM
document.addEventListener('DOMContentLoaded', function() {
    console.log('üèÅ DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É...');
    
    try {
        game = new ProfessionalTrackGame();
        console.log('üéâ –ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞!');
        console.log('üìç game –¥–æ—Å—Ç—É–ø–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ:', typeof game !== 'undefined');
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–Ω–æ–ø–∫–µ —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        window.testGame = function() {
            console.log('üß™ –¢–µ—Å—Ç: game.addPlayer()', typeof game.addPlayer);
            game.addPlayer();
        };
        
    } catch (error) {
        console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
        alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä—ã: ' + error.message);
    }
});

// –î–µ–ª–∞–µ–º game –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º –¥–ª—è HTML onclick
window.game = null;

// –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
setTimeout(() => {
    window.game = game;
    console.log('üåê game —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ:', !!window.game);
}, 100);
