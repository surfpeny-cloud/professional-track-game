// –û—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π –∫–ª–∞—Å—Å
class ProfessionalTrackGame {
    constructor() {
        this.players = [];
        this.currentPlayerIndex = 0;
        this.currentTurn = 1;
        this.gameState = 'setup'; // setup, playing, ended
        this.history = [];
        this.diceValue = 0;
        this.currentQuest = null;
        this.currentCellType = null;
        this.telegramUser = null;
        
        this.initializeEventListeners();
        this.initializeTelegram();
        this.loadFromStorage();
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
    initializeTelegram() {
        if (window.Telegram && window.Telegram.WebApp) {
            this.tg = window.Telegram.WebApp;
            this.tg.expand();
            this.tg.enableClosingConfirmation();
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
            const user = this.tg.initDataUnsafe?.user;
            if (user) {
                this.telegramUser = user;
                console.log('Telegram user:', user);
            }
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–æ–¥ Telegram
            this.tg.setHeaderColor('#6c5ce7');
            this.tg.setBackgroundColor('#1a1a2e');
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    initializeEventListeners() {
        // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞
        document.getElementById('addPlayerBtn').addEventListener('click', () => this.addPlayer());
        
        // –ö–Ω–æ–ø–∫–∞ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
        document.getElementById('startGameBtn').addEventListener('click', () => this.startGame());
        
        // –ö–Ω–æ–ø–∫–∞ –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞
        document.getElementById('rollBtn').addEventListener('click', () => this.rollDice());
        
        // –ö–Ω–æ–ø–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
        document.getElementById('nextPlayerBtn').addEventListener('click', () => this.nextPlayer());
        
        // –ö–Ω–æ–ø–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
        document.getElementById('successBtn').addEventListener('click', () => this.completeQuest(true));
        document.getElementById('failBtn').addEventListener('click', () => this.completeQuest(false));
        
        // –ö–Ω–æ–ø–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞
        document.getElementById('shopBtn').addEventListener('click', () => this.openShop());
        document.getElementById('closeShopBtn').addEventListener('click', () => this.closeShop());
        
        // –ö–Ω–æ–ø–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
        document.getElementById('endGameBtn').addEventListener('click', () => this.endGame());
        
        // –ö–Ω–æ–ø–∫–∞ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
        document.getElementById('newGameBtn').addEventListener('click', () => this.newGame());
        
        // –í–≤–æ–¥ –∏–º–µ–Ω–∏ –∏–≥—Ä–æ–∫–∞ –ø–æ Enter
        document.getElementById('playerNameInput').addEventListener('keypress', (e) => {
            if (e.key === 'Enter') this.addPlayer();
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –º–∞–≥–∞–∑–∏–Ω–∞
        document.getElementById('modalCloseBtn').addEventListener('click', () => {
            this.closeItemModal();
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –µ–≥–æ
        document.getElementById('itemModal').addEventListener('click', (e) => {
            if (e.target.id === 'itemModal') {
                this.closeItemModal();
            }
        });
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
    addPlayer() {
        const nameInput = document.getElementById('playerNameInput');
        const colorSelect = document.getElementById('playerColorSelect');
        
        const name = nameInput.value.trim();
        const color = colorSelect.value;
        
        if (!name) {
            this.showNotification('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–≥—Ä–æ–∫–∞', 'error');
            return;
        }
        
        if (this.players.length >= GAME_CONFIG.maxPlayers) {
            this.showNotification(`–ú–∞–∫—Å–∏–º—É–º ${GAME_CONFIG.maxPlayers} –∏–≥—Ä–æ–∫–æ–≤`, 'error');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–º–µ–Ω–∏
        if (this.players.some(player => player.name.toLowerCase() === name.toLowerCase())) {
            this.showNotification('–ò–≥—Ä–æ–∫ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', 'error');
            return;
        }
        
        const player = {
            id: Date.now().toString(),
            name: name,
            color: color,
            reputation: GAME_CONFIG.startingReputation,
            level: 'intern',
            skills: [],
            inventory: [],
            position: 0,
            turns: 0,
            completedQuests: 0,
            failedQuests: 0,
            maxSkills: 2 // –ù–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ—Ç–æ–≤ –¥–ª—è –Ω–∞–≤—ã–∫–æ–≤
        };
        
        this.players.push(player);
        this.updatePlayersList();
        this.updateStartButton();
        
        // –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—è –≤–≤–æ–¥–∞
        nameInput.value = '';
        nameInput.focus();
        
        this.showNotification(`–ò–≥—Ä–æ–∫ ${name} –¥–æ–±–∞–≤–ª–µ–Ω!`, 'success');
        this.saveToStorage();
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤
    updatePlayersList() {
        const playersList = document.getElementById('playersList');
        const playerCount = document.getElementById('playerCount');
        
        playerCount.textContent = `${this.players.length} –∏–≥—Ä–æ–∫${this.getRussianPlural(this.players.length, '', '–∞', '–æ–≤')}`;
        
        if (this.players.length === 0) {
            playersList.innerHTML = `
                <div class="empty-state">
                    <div class="empty-icon">üë•</div>
                    <div class="empty-text">–ü–æ–∫–∞ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤</div>
                    <div class="empty-subtext">–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å</div>
                </div>
            `;
            return;
        }
        
        playersList.innerHTML = this.players.map(player => `
            <div class="player-item ${player.color}">
                <div class="player-info">
                    <div class="player-color ${player.color}"></div>
                    <span class="player-name">${player.name}</span>
                </div>
                <button class="remove-player" onclick="game.removePlayer('${player.id}')">√ó</button>
            </div>
        `).join('');
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
    removePlayer(playerId) {
        this.players = this.players.filter(player => player.id !== playerId);
        this.updatePlayersList();
        this.updateStartButton();
        this.saveToStorage();
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
    updateStartButton() {
        const startBtn = document.getElementById('startGameBtn');
        const isValid = this.players.length >= GAME_CONFIG.minPlayers && 
                       this.players.length <= GAME_CONFIG.maxPlayers;
        
        startBtn.disabled = !isValid;
    }

    // –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã
    startGame() {
        if (this.players.length < GAME_CONFIG.minPlayers) {
            this.showNotification(`–ù—É–∂–Ω–æ –∫–∞–∫ –º–∏–Ω–∏–º—É–º ${GAME_CONFIG.minPlayers} –∏–≥—Ä–æ–∫–∞`, 'error');
            return;
        }
        
        this.gameState = 'playing';
        this.currentPlayerIndex = 0;
        this.currentTurn = 1;
        this.history = [];
        
        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
        document.getElementById('setupSection').style.display = 'none';
        document.getElementById('gameInterface').style.display = 'block';
        
        this.updateGameInterface();
        this.addHistoryMessage(HISTORY_MESSAGES.game_start);
        
        this.showNotification('–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –£–¥–∞—á–∏!', 'success');
        this.saveToStorage();
    }

    // –ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞
    async rollDice() {
        const dice = document.getElementById('dice');
        const rollBtn = document.getElementById('rollBtn');
        const diceNumber = document.getElementById('diceNumber');
        const diceResult = document.getElementById('diceResult');
        
        // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ –≤—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏
        rollBtn.disabled = true;
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –±—Ä–æ—Å–∫–∞
        dice.classList.add('rolling');
        
        // –°–ª—É—á–∞–π–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤–æ –≤—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏
        for (let i = 0; i < 10; i++) {
            const randomValue = Math.floor(Math.random() * 6) + 1;
            diceNumber.textContent = DICE_SYMBOLS[randomValue - 1];
            await this.sleep(100);
        }
        
        // –§–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        this.diceValue = Math.floor(Math.random() * 6) + 1;
        diceNumber.textContent = DICE_SYMBOLS[this.diceValue - 1];
        
        // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏
        setTimeout(() => {
            dice.classList.remove('rolling');
            rollBtn.disabled = false;
            
            // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–ª–µ—Ç–∫–∏
            this.determineCellType();
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            diceResult.innerHTML = `
                <span class="result-icon">üìä</span>
                <span class="result-text">–†–µ–∑—É–ª—å—Ç–∞—Ç: ${this.diceValue}</span>
            `;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            this.addHistoryMessage(
                this.getCurrentPlayer().name + HISTORY_MESSAGES.dice_roll + this.diceValue
            );
            
            this.saveToStorage();
        }, 500);
    }

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–ª–µ—Ç–∫–∏ –ø–æ –±—Ä–æ—Å–∫—É –∫—É–±–∏–∫–∞
    determineCellType() {
        let cellType;
        
        if (this.diceValue <= 2) {
            cellType = 'green'; // –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç
        } else if (this.diceValue <= 4) {
            cellType = 'blue'; // –ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞
        } else if (this.diceValue === 5) {
            cellType = 'yellow'; // –ö—Ä–∏–∑–∏—Å –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        } else {
            cellType = 'purple'; // –û—Å–æ–±—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        }
        
        this.currentCellType = cellType;
        this.showQuest(cellType);
    }

    // –ü–æ–∫–∞–∑ –∑–∞–¥–∞–Ω–∏—è
    showQuest(cellType) {
        const cellTypeInfo = CELL_TYPES[cellType];
        const quests = QUESTS[cellType];
        const randomQuest = quests[Math.floor(Math.random() * quests.length)];
        
        this.currentQuest = randomQuest;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–ª–µ—Ç–∫–∏
        const cellDisplay = document.getElementById('cellDisplay');
        const cellIcon = document.getElementById('cellIcon');
        const cellTypeElem = document.getElementById('cellType');
        const cellDescription = document.getElementById('cellDescription');
        const cellPosition = document.getElementById('cellPosition');
        
        cellDisplay.className = `cell-display ${cellTypeInfo.colorClass}`;
        cellIcon.textContent = cellTypeInfo.emoji;
        cellTypeElem.textContent = cellTypeInfo.name;
        cellDescription.textContent = cellTypeInfo.description;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞
        const currentPlayer = this.getCurrentPlayer();
        currentPlayer.position += this.diceValue;
        cellPosition.textContent = `–ü–æ–∑–∏—Ü–∏—è: ${currentPlayer.position}`;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
        const currentQuestElem = document.getElementById('currentQuest');
        const questDifficulty = document.getElementById('questDifficulty');
        const instructionsText = document.getElementById('instructionsText');
        const rewardsText = document.getElementById('rewardsText');
        const completionButtons = document.getElementById('completionButtons');
        
        currentQuestElem.textContent = randomQuest.description;
        
        // –°–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞–Ω–∏—è
        const difficulty = DIFFICULTIES[randomQuest.difficulty];
        questDifficulty.innerHTML = `
            <span class="difficulty-icon">${difficulty.emoji}</span>
            <span class="difficulty-text ${difficulty.color}">–°–ª–æ–∂–Ω–æ—Å—Ç—å: ${difficulty.name}</span>
        `;
        
        // –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        instructionsText.innerHTML = randomQuest.instructions
            .map(instruction => `<div class="instruction-item">${instruction}</div>`)
            .join('');
        
        // –ù–∞–≥—Ä–∞–¥—ã
        rewardsText.innerHTML = randomQuest.rewards
            .map(reward => `<div class="reward-item">${reward}</div>`)
            .join('');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        completionButtons.style.display = 'grid';
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        this.addHistoryMessage(
            this.getCurrentPlayer().name + HISTORY_MESSAGES.quest_start + randomQuest.title
        );
        
        this.saveToStorage();
    }

    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
    completeQuest(success) {
        const player = this.getCurrentPlayer();
        
        if (success) {
            // –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —É—Å–ø–µ—Ö
            const reputationGain = this.calculateReputationGain();
            player.reputation += reputationGain;
            
            this.addHistoryMessage(
                player.name + HISTORY_MESSAGES.quest_success + 
                HISTORY_MESSAGES.reputation_gain.replace('{amount}', reputationGain)
            );
            
            player.completedQuests++;
            this.showNotification(`–û—Ç–ª–∏—á–Ω–æ! +${reputationGain} —Ä–µ–ø—É—Ç–∞—Ü–∏–∏!`, 'success');
        } else {
            // –®—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–æ–≤–∞–ª
            player.reputation = Math.max(0, player.reputation - 1);
            
            this.addHistoryMessage(player.name + HISTORY_MESSAGES.quest_fail);
            player.failedQuests++;
            this.showNotification('–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!', 'warning');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
        this.checkLevelUp(player);
        
        // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        document.getElementById('completionButtons').style.display = 'none';
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        this.updateGameInterface();
        this.saveToStorage();
    }

    // –†–∞—Å—á–µ—Ç –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –∑–∞–¥–∞–Ω–∏–µ
    calculateReputationGain() {
        if (!this.currentQuest) return 2;
        
        const baseReward = {
            easy: 1,
            medium: 2,
            hard: 3,
            epic: 5
        }[this.currentQuest.difficulty];
        
        return baseReward;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
    checkLevelUp(player) {
        const levels = Object.entries(CAREER_LEVELS);
        
        for (let i = levels.length - 1; i >= 0; i--) {
            const [levelKey, level] = levels[i];
            if (player.reputation >= level.reputation && player.level !== levelKey) {
                player.level = levelKey;
                this.addHistoryMessage(
                    player.name + HISTORY_MESSAGES.level_up + level.name
                );
                this.showNotification(`–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: ${level.name}`, 'success');
                break;
            }
        }
    }

    // –°–ª–µ–¥—É—é—â–∏–π –∏–≥—Ä–æ–∫
    nextPlayer() {
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É
        this.currentPlayerIndex = (this.currentPlayerIndex + 1) % this.players.length;
        
        // –ï—Å–ª–∏ –≤—Å–µ –∏–≥—Ä–æ–∫–∏ —Å–¥–µ–ª–∞–ª–∏ —Ö–æ–¥, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ö–æ–¥–∞
        if (this.currentPlayerIndex === 0) {
            this.currentTurn++;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
            if (this.currentTurn > GAME_CONFIG.maxTurns || 
                this.players.some(player => player.reputation >= GAME_CONFIG.victoryReputation)) {
                this.endGame();
                return;
            }
        }
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.diceValue = 0;
        this.currentQuest = null;
        this.currentCellType = null;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        this.updateGameInterface();
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫—É–±–∏–∫–∞ –∏ –∑–∞–¥–∞–Ω–∏—è
        document.getElementById('diceNumber').textContent = '?';
        document.getElementById('diceResult').innerHTML = `
            <span class="result-icon">üìä</span>
            <span class="result-text">–†–µ–∑—É–ª—å—Ç–∞—Ç: -</span>
        `;
        
        document.getElementById('completionButtons').style.display = 'none';
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–ª–µ—Ç–∫–∏
        const cellDisplay = document.getElementById('cellDisplay');
        cellDisplay.className = 'cell-display';
        document.getElementById('cellIcon').textContent = 'üéØ';
        document.getElementById('cellType').textContent = '–¢–∏–ø –∑–∞–¥–∞–Ω–∏—è';
        document.getElementById('cellDescription').textContent = '–ë—Ä–æ—Å—å—Ç–µ –∫—É–±–∏–∫ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –∑–∞–¥–∞–Ω–∏—è';
        document.getElementById('cellPosition').textContent = '–ü–æ–∑–∏—Ü–∏—è: -';
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
        document.getElementById('currentQuest').textContent = '–ë—Ä–æ—Å—å—Ç–µ –∫—É–±–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è!';
        document.getElementById('instructionsText').innerHTML = '<div class="empty-instruction">-</div>';
        document.getElementById('rewardsText').innerHTML = '<div class="empty-reward">-</div>';
        
        this.addHistoryMessage(this.getCurrentPlayer().name + HISTORY_MESSAGES.player_turn);
        this.saveToStorage();
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    updateGameInterface() {
        const currentPlayer = this.getCurrentPlayer();
        
        // –¢–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫
        document.getElementById('currentPlayerName').textContent = currentPlayer.name;
        document.getElementById('currentPlayerReputation').textContent = currentPlayer.reputation;
        document.getElementById('currentPlayerLevel').textContent = CAREER_LEVELS[currentPlayer.level].name;
        
        // –ê–≤–∞—Ç–∞—Ä –∏–≥—Ä–æ–∫–∞
        const avatar = document.getElementById('currentPlayerAvatar');
        avatar.innerHTML = `<span class="avatar-emoji">${PLAYER_COLORS[currentPlayer.color].emoji}</span>`;
        
        // –°—Ç–∞—Ç—É—Å –∏–≥—Ä—ã
        document.getElementById('currentTurn').textContent = this.currentTurn;
        document.getElementById('totalPlayers').textContent = this.players.length;
        
        // –¢–∞–±–ª–∏—Ü–∞ –∏–≥—Ä–æ–∫–æ–≤
        this.updatePlayersTable();
        
        // –ò—Å—Ç–æ—Ä–∏—è
        this.updateHistory();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
        document.getElementById('currentStep').textContent = 
            `–•–æ–¥ ${this.currentTurn} ‚Ä¢ ${currentPlayer.name}`;
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏–≥—Ä–æ–∫–æ–≤
    updatePlayersTable() {
        const playersTable = document.getElementById('playersTable');
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏
        const sortedPlayers = [...this.players].sort((a, b) => b.reputation - a.reputation);
        
        playersTable.innerHTML = `
            <div class="table-header">
                <div class="table-cell">#</div>
                <div class="table-cell">–ò–≥—Ä–æ–∫</div>
                <div class="table-cell">–£—Ä–æ–≤–µ–Ω—å</div>
                <div class="table-cell">–†–µ–ø—É—Ç–∞—Ü–∏—è</div>
            </div>
            ${sortedPlayers.map((player, index) => `
                <div class="table-row ${player.id === this.getCurrentPlayer().id ? 'current-turn' : ''}">
                    <div class="table-cell">${index + 1}</div>
                    <div class="table-cell">
                        <div class="player-color-small ${player.color}"></div>
                        ${player.name}
                    </div>
                    <div class="table-cell">${CAREER_LEVELS[player.level].name}</div>
                    <div class="table-cell">${player.reputation} ‚≠ê</div>
                </div>
            `).join('')}
        `;
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
    updateHistory() {
        const historyElem = document.getElementById('history');
        
        if (this.history.length === 0) {
            historyElem.innerHTML = `
                <div class="empty-history">
                    <div class="empty-icon">üìù</div>
                    <div class="empty-text">–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞ –ø—É—Å—Ç–∞</div>
                    <div class="empty-subtext">–ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –¥–µ–π—Å—Ç–≤–∏—è –∏–≥—Ä–æ–∫–æ–≤</div>
                </div>
            `;
            return;
        }
        
        historyElem.innerHTML = this.history
            .slice(-10) // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π
            .reverse() // –ù–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É
            .map(entry => `
                <div class="history-item ${this.players.find(p => p.name === entry.player)?.color || ''}">
                    <div class="history-content">${entry.message}</div>
                    <div class="history-time">${entry.time}</div>
                </div>
            `)
            .join('');
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é
    addHistoryMessage(message) {
        const player = this.getCurrentPlayer();
        this.history.push({
            player: player.name,
            message: message,
            time: new Date().toLocaleTimeString('ru-RU', { 
                hour: '2-digit', 
                minute: '2-digit' 
            })
        });
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
        if (this.history.length > 50) {
            this.history = this.history.slice(-50);
        }
    }

    // –ú–∞–≥–∞–∑–∏–Ω
    openShop() {
        document.getElementById('shopSection').style.display = 'block';
        this.renderShop();
    }

    closeShop() {
        document.getElementById('shopSection').style.display = 'none';
    }

    // –†–µ–Ω–¥–µ—Ä –º–∞–≥–∞–∑–∏–Ω–∞
    renderShop() {
        const categoryTabs = document.getElementById('categoryTabs');
        const shopItems = document.getElementById('shopItems');
        const shopBalance = document.getElementById('shopBalance');
        const inventoryGrid = document.getElementById('inventoryGrid');
        
        const currentPlayer = this.getCurrentPlayer();
        
        // –ë–∞–ª–∞–Ω—Å
        shopBalance.textContent = currentPlayer.reputation;
        
        // –í–∫–ª–∞–¥–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        categoryTabs.innerHTML = SHOP_CATEGORIES.map(category => `
            <button class="category-tab ${category.id === 'skills' ? 'active' : ''}" 
                    onclick="game.selectShopCategory('${category.id}')">
                <span class="tab-icon">${category.icon}</span>
                ${category.name}
            </button>
        `).join('');
        
        // –¢–æ–≤–∞—Ä—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–µ—Ä–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è)
        this.renderShopCategory('skills');
        
        // –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–≥—Ä–æ–∫–∞
        this.renderPlayerInventory();
    }

    // –†–µ–Ω–¥–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞
    renderShopCategory(categoryId) {
        const shopItems = document.getElementById('shopItems');
        const currentPlayer = this.getCurrentPlayer();
        const category = SHOP_ITEMS[categoryId];
        
        if (!category) return;
        
        shopItems.innerHTML = category.items.map(item => {
            const canAfford = currentPlayer.reputation >= item.price;
            const alreadyOwned = currentPlayer.inventory.some(inv => inv.id === item.id && 
                (item.maxLevel ? inv.level >= item.maxLevel : true));
            
            return `
                <div class="shop-item ${item.featured ? 'featured' : ''}">
                    <div class="shop-item-header">
                        <div class="item-icon">${item.icon}</div>
                        <div class="item-info">
                            <div class="item-name">${item.name}</div>
                            <div class="item-description">${item.description}</div>
                        </div>
                        <div class="item-price">
                            <span class="price-icon">‚≠ê</span>
                            ${item.price}
                        </div>
                    </div>
                    <div class="item-actions">
                        <button class="buy-btn" 
                                onclick="game.buyItem('${categoryId}', '${item.id}')"
                                ${!canAfford || alreadyOwned ? 'disabled' : ''}>
                            <span class="btn-icon">üõí</span>
                            ${alreadyOwned ? '–ö—É–ø–ª–µ–Ω–æ' : canAfford ? '–ö—É–ø–∏—Ç—å' : '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ'}
                        </button>
                        <button class="info-btn" onclick="game.showItemInfo('${categoryId}', '${item.id}')">
                            ‚ÑπÔ∏è
                        </button>
                    </div>
                </div>
            `;
        }).join('');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
        document.querySelectorAll('.category-tab').forEach(tab => {
            tab.classList.remove('active');
        });
        document.querySelector(`.category-tab[onclick*="${categoryId}"]`).classList.add('active');
    }

    // –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞
    selectShopCategory(categoryId) {
        this.renderShopCategory(categoryId);
    }

    // –ü–æ–∫—É–ø–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
    buyItem(categoryId, itemId) {
        const currentPlayer = this.getCurrentPlayer();
        const category = SHOP_ITEMS[categoryId];
        const item = category.items.find(i => i.id === itemId);
        
        if (!item || currentPlayer.reputation < item.price) {
            this.showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏!', 'error');
            return;
        }
        
        // –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        currentPlayer.reputation -= item.price;
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
        const inventoryItem = {
            id: item.id,
            name: item.name,
            icon: item.icon,
            type: item.type,
            effect: item.effect,
            purchasedAt: new Date().toISOString()
        };
        
        // –î–ª—è —É–ª—É—á—à–µ–Ω–∏–π —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å
        const existingItem = currentPlayer.inventory.find(inv => inv.id === item.id);
        if (existingItem) {
            existingItem.level = (existingItem.level || 1) + 1;
        } else {
            inventoryItem.level = 1;
            currentPlayer.inventory.push(inventoryItem);
        }
        
        // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞
        this.applyItemEffect(item, currentPlayer);
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        this.updateGameInterface();
        this.renderShop();
        this.renderPlayerInventory();
        
        this.addHistoryMessage(
            currentPlayer.name + HISTORY_MESSAGES.item_purchase + item.name
        );
        
        this.showNotification(`–£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞: ${item.name}`, 'success');
        this.saveToStorage();
    }

    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
    applyItemEffect(item, player) {
        switch (item.effect) {
            case 'add_reputation':
                player.reputation += item.amount;
                this.showNotification(`+${item.amount} —Ä–µ–ø—É—Ç–∞—Ü–∏–∏!`, 'success');
                break;
            case 'add_skill_slot':
                // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–≤—ã–∫–æ–≤
                if (!player.maxSkills) player.maxSkills = 2;
                player.maxSkills += 1;
                this.showNotification('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ—Ç –¥–ª—è –Ω–∞–≤—ã–∫–∞ –æ—Ç–∫—Ä—ã—Ç!', 'success');
                break;
            case 'level_up':
                this.forceLevelUp(player);
                break;
            case 'skill_boost':
                player.skillBoost = {
                    skill: item.skill,
                    duration: item.duration,
                    bonus: 1
                };
                this.showNotification(`–ù–∞–≤—ã–∫ —É—Å–∏–ª–µ–Ω –Ω–∞ ${item.duration} —Ö–æ–¥–∞!`, 'success');
                break;
            default:
                this.showNotification(`–≠—Ñ—Ñ–µ–∫—Ç "${item.name}" –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!`, 'success');
        }
    }

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
    forceLevelUp(player) {
        const levels = Object.keys(CAREER_LEVELS);
        const currentIndex = levels.indexOf(player.level);
        
        if (currentIndex < levels.length - 1) {
            player.level = levels[currentIndex + 1];
            this.showNotification(`–£—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–µ–Ω –¥–æ ${CAREER_LEVELS[player.level].name}!`, 'success');
        } else {
            this.showNotification('–í—ã —É–∂–µ –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è!', 'info');
        }
    }

    // –†–µ–Ω–¥–µ—Ä –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –∏–≥—Ä–æ–∫–∞
    renderPlayerInventory() {
        const inventoryGrid = document.getElementById('inventoryGrid');
        const currentPlayer = this.getCurrentPlayer();
        
        if (currentPlayer.inventory.length === 0) {
            inventoryGrid.innerHTML = `
                <div class="empty-inventory">
                    <div class="empty-icon">üéí</div>
                    <div class="empty-text">–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç</div>
                    <div class="empty-subtext">–ö—É–ø–∏—Ç–µ —É–ª—É—á—à–µ–Ω–∏—è –≤ –º–∞–≥–∞–∑–∏–Ω–µ</div>
                </div>
            `;
            return;
        }
        
        inventoryGrid.innerHTML = currentPlayer.inventory.map(item => `
            <div class="inventory-item ${item.active ? 'active' : ''}">
                <div class="inventory-icon">${item.icon}</div>
                <div class="inventory-name">${item.name}</div>
                ${item.level > 1 ? `<div class="inventory-level">${item.level}</div>` : ''}
            </div>
        `).join('');
    }

    // –ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ
    showItemInfo(categoryId, itemId) {
        const category = SHOP_ITEMS[categoryId];
        const item = category.items.find(i => i.id === itemId);
        
        if (!item) return;
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        document.getElementById('modalItemIcon').textContent = item.icon;
        document.getElementById('modalItemName').textContent = item.name;
        document.getElementById('modalItemDescription').textContent = item.description;
        document.getElementById('modalItemPrice').textContent = `${item.price} ‚≠ê`;
        document.getElementById('modalItemType').textContent = this.getItemTypeName(item.type);
        document.getElementById('modalItemEffect').textContent = this.getItemEffectDescription(item);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫—É–ø–∫–∏
        const buyBtn = document.getElementById('modalBuyBtn');
        const currentPlayer = this.getCurrentPlayer();
        const canAfford = currentPlayer.reputation >= item.price;
        const alreadyOwned = currentPlayer.inventory.some(inv => inv.id === item.id && 
            (item.maxLevel ? inv.level >= item.maxLevel : true));
        
        buyBtn.onclick = () => {
            if (!alreadyOwned && canAfford) {
                this.buyItem(categoryId, itemId);
                this.closeItemModal();
            }
        };
        
        buyBtn.disabled = alreadyOwned || !canAfford;
        buyBtn.innerHTML = alreadyOwned ? 
            '‚úÖ –ö—É–ø–ª–µ–Ω–æ' : 
            canAfford ? 
                '<span class="btn-icon">üõí</span> –ö—É–ø–∏—Ç—å' : 
                '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ';
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        document.getElementById('itemModal').style.display = 'flex';
    }

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    closeItemModal() {
        document.getElementById('itemModal').style.display = 'none';
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∏–ø–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
    getItemTypeName(type) {
        const types = {
            permanent: '–ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ',
            temporary: '–í—Ä–µ–º–µ–Ω–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç',
            consumable: '–†–∞—Å—Ö–æ–¥–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç',
            instant: '–ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç'
        };
        return types[type] || type;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
    getItemEffectDescription(item) {
        const effects = {
            add_skill_slot: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ—Ç –¥–ª—è –Ω–∞–≤—ã–∫–∞',
            skill_boost: '–í—Ä–µ–º–µ–Ω–Ω–æ–µ —É—Å–∏–ª–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–∞',
            reroll_dice: '–ü–µ—Ä–µ–±—Ä–æ—Å –∫—É–±–∏–∫–∞',
            dice_bonus: '–ë–æ–Ω—É—Å –∫ –±—Ä–æ—Å–∫—É –∫—É–±–∏–∫–∞',
            add_reputation: '–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏',
            reputation_multiplier: '–£–º–Ω–æ–∂–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã',
            time_extension: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è',
            skip_quest: '–ü—Ä–æ–ø—É—Å–∫ –∑–∞–¥–∞–Ω–∏—è',
            get_hint: '–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏',
            level_up: '–ü–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è',
            auto_success: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —É—Å–ø–µ—Ö –≤ –∑–∞–¥–∞–Ω–∏–∏',
            reputation_shield: '–ó–∞—â–∏—Ç–∞ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ –ø—Ä–∏ –ø—Ä–æ–≤–∞–ª–µ',
            advantage_roll: '–ë—Ä–æ—Å–æ–∫ –¥–≤—É—Ö –∫—É–±–∏–∫–æ–≤ —Å –≤—ã–±–æ—Ä–æ–º –ª—É—á—à–µ–≥–æ',
            perfect_roll: '–ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±—Ä–æ—Å–æ–∫'
        };
        return effects[item.effect] || '–û—Å–æ–±—ã–π —ç—Ñ—Ñ–µ–∫—Ç';
    }

    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
    endGame() {
        this.gameState = 'ended';
        
        // –°–∫—Ä—ã–≤–∞–µ–º –∏–≥—Ä–æ–≤–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        document.getElementById('gameInterface').style.display = 'none';
        document.getElementById('resultsSection').style.display = 'block';
        
        this.showResults();
        this.saveToStorage();
    }

    // –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    showResults() {
        const winnerCard = document.getElementById('winnerCard');
        const finalResults = document.getElementById('finalResults');
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        const sortedPlayers = [...this.players].sort((a, b) => b.reputation - a.reputation);
        const winner = sortedPlayers[0];
        
        // –ö–∞—Ä—Ç–æ—á–∫–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        winnerCard.innerHTML = `
            <div class="winner-avatar">${PLAYER_COLORS[winner.color].emoji}</div>
            <div class="winner-name">${winner.name}</div>
            <div class="winner-title">–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –∏–≥—Ä—ã!</div>
            <div class="winner-stats">
                <div class="winner-stat">
                    <span class="stat-label">–†–µ–ø—É—Ç–∞—Ü–∏—è:</span>
                    <span class="stat-value">${winner.reputation} ‚≠ê</span>
                </div>
                <div class="winner-stat">
                    <span class="stat-label">–£—Ä–æ–≤–µ–Ω—å:</span>
                    <span class="stat-value">${CAREER_LEVELS[winner.level].name}</span>
                </div>
                <div class="winner-stat">
                    <span class="stat-label">–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π:</span>
                    <span class="stat-value">${winner.completedQuests}</span>
                </div>
            </div>
        `;
        
        // –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
        finalResults.innerHTML = sortedPlayers
            .map((player, index) => `
                <div class="result-row ${player.id === winner.id ? 'winner' : ''}">
                    <div class="result-rank">${index + 1}</div>
                    <div class="result-player">
                        <div class="player-color-small ${player.color}"></div>
                        ${player.name}
                    </div>
                    <div class="result-reputation">${player.reputation} ‚≠ê</div>
                    <div class="result-level">${CAREER_LEVELS[player.level].name}</div>
                </div>
            `)
            .join('');
    }

    // –ù–æ–≤–∞—è –∏–≥—Ä–∞
    newGame() {
        if (confirm('–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É? –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –±—É–¥–µ—Ç –ø–æ—Ç–µ—Ä—è–Ω.')) {
            this.players = [];
            this.currentPlayerIndex = 0;
            this.currentTurn = 1;
            this.gameState = 'setup';
            this.history = [];
            this.diceValue = 0;
            this.currentQuest = null;
            this.currentCellType = null;
            
            // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
            document.getElementById('resultsSection').style.display = 'none';
            document.getElementById('gameInterface').style.display = 'none';
            document.getElementById('setupSection').style.display = 'block';
            
            this.updatePlayersList();
            this.updateStartButton();
            
            // –û—á–∏—â–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            localStorage.removeItem('professionalTrackGame');
            
            this.showNotification('–ù–æ–≤–∞—è –∏–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞!', 'success');
        }
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    getCurrentPlayer() {
        return this.players[this.currentPlayerIndex];
    }

    getRussianPlural(number, one, two, five) {
        let n = Math.abs(number);
        n %= 100;
        if (n >= 5 && n <= 20) return five;
        n %= 10;
        if (n === 1) return one;
        if (n >= 2 && n <= 4) return two;
        return five;
    }

    sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    showNotification(message, type = 'info') {
        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        notification.innerHTML = `
            <div class="notification-content">
                <span class="notification-icon">${this.getNotificationIcon(type)}</span>
                <span class="notification-text">${message}</span>
            </div>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: ${this.getNotificationColor(type)};
            color: white;
            padding: 12px 20px;
            border-radius: 10px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.3);
            z-index: 10000;
            max-width: 300px;
            animation: slideInRight 0.3s ease;
        `;
        
        document.body.appendChild(notification);
        
        // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            notification.style.animation = 'slideOutRight 0.3s ease';
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 300);
        }, 3000);
        
        // –î–æ–±–∞–≤–ª—è–µ–º CSS –∞–Ω–∏–º–∞—Ü–∏–∏
        this.addNotificationStyles();
    }

    getNotificationIcon(type) {
        const icons = {
            success: '‚úÖ',
            error: '‚ùå',
            warning: '‚ö†Ô∏è',
            info: '‚ÑπÔ∏è'
        };
        return icons[type] || '‚ÑπÔ∏è';
    }

    getNotificationColor(type) {
        const colors = {
            success: '#00b894',
            error: '#ff7675',
            warning: '#fdcb6e',
            info: '#74b9ff'
        };
        return colors[type] || '#74b9ff';
    }

    addNotificationStyles() {
        if (!document.getElementById('notification-styles')) {
            const styles = document.createElement('style');
            styles.id = 'notification-styles';
            styles.textContent = `
                @keyframes slideInRight {
                    from { transform: translateX(100%); opacity: 0; }
                    to { transform: translateX(0); opacity: 1; }
                }
                @keyframes slideOutRight {
                    from { transform: translateX(0); opacity: 1; }
                    to { transform: translateX(100%); opacity: 0; }
                }
            `;
            document.head.appendChild(styles);
        }
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫–∞
    saveToStorage() {
        const gameData = {
            players: this.players,
            currentPlayerIndex: this.currentPlayerIndex,
            currentTurn: this.currentTurn,
            gameState: this.gameState,
            history: this.history,
            diceValue: this.diceValue,
            currentQuest: this.currentQuest,
            currentCellType: this.currentCellType,
            saveTime: new Date().toISOString()
        };
        
        localStorage.setItem('professionalTrackGame', JSON.stringify(gameData));
    }

    loadFromStorage() {
        const saved = localStorage.getItem('professionalTrackGame');
        if (saved) {
            try {
                const gameData = JSON.parse(saved);
                
                this.players = gameData.players || [];
                this.currentPlayerIndex = gameData.currentPlayerIndex || 0;
                this.currentTurn = gameData.currentTurn || 1;
                this.gameState = gameData.gameState || 'setup';
                this.history = gameData.history || [];
                this.diceValue = gameData.diceValue || 0;
                this.currentQuest = gameData.currentQuest || null;
                this.currentCellType = gameData.currentCellType || null;
                
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
                if (this.gameState === 'playing') {
                    document.getElementById('setupSection').style.display = 'none';
                    document.getElementById('gameInterface').style.display = 'block';
                    this.updateGameInterface();
                } else if (this.gameState === 'ended') {
                    document.getElementById('setupSection').style.display = 'none';
                    document.getElementById('gameInterface').style.display = 'none';
                    document.getElementById('resultsSection').style.display = 'block';
                    this.showResults();
                } else {
                    this.updatePlayersList();
                    this.updateStartButton();
                }
                
                console.log('–ò–≥—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
                
            } catch (e) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', e);
                localStorage.removeItem('professionalTrackGame');
            }
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
let game;

document.addEventListener('DOMContentLoaded', () => {
    game = new ProfessionalTrackGame();
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–∑–æ–≤–æ–≤ –∏–∑ HTML
function removePlayer(playerId) {
    if (game) {
        game.removePlayer(playerId);
    }
}

function selectShopCategory(categoryId) {
    if (game) {
        game.selectShopCategory(categoryId);
    }
}

function buyItem(categoryId, itemId) {
    if (game) {
        game.buyItem(categoryId, itemId);
    }
}

function showItemInfo(categoryId, itemId) {
    if (game) {
        game.showItemInfo(categoryId, itemId);
    }
}
